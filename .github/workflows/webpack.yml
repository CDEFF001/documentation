.github/workflows/android-tokenchain-release.yml

name: 🔥 TokenChain Sovereign CI/CD (FinalForm Governance Lock + Validator + CDN)

on: push: branches: - main - release/** tags: - 'v*..'

permissions: contents: write pull-requests: write actions: write id-token: write

jobs: build-and-release: if: github.actor == 'authorized-governor'  # Require governor-level authority runs-on: ubuntu-latest

strategy:
  matrix:
    region: [us, eu, ng]

env:
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_PRIVATE_KEY }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
  FIREBASE_PROJECT_ID: cdeff0001
  IPFS_API_URL: ${{ secrets.IPFS_API_URL }}
  IPFS_API_KEY: ${{ secrets.IPFS_API_KEY }}

steps:
  - name: 🔒 Verify GPG Signature of Commit
    run: |
      echo "Checking commit GPG signature..."
      if [ "$(git log -1 --pretty=%G?)" != "G" ]; then
        echo "❌ Commit is not GPG signed and verified. Aborting." && exit 1
      fi

  - name: 🔀 Checkout Repository
    uses: actions/checkout@v3

  - name: ☕️ Setup JDK 17
    uses: actions/setup-java@v3
    with:
      distribution: 'temurin'
      java-version: '17'

  - name: 🚀 Install Firebase CLI
    run: |
      curl -sL https://firebase.tools | bash
      firebase --version

  - name: 🔍 Auth Firebase CLI with Token
    run: |
      echo "$FIREBASE_TOKEN" > firebase_token.txt
      firebase login:ci --token "$FIREBASE_TOKEN"

  - name: 🔐 Fetch `keystore.properties` securely from Firebase Function
    run: |
      curl -L -o keystore.properties https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/exportKeystoreProperties

  - name: 🔒 Inject Keystore (.jks) From GitHub Secret
    run: |
      echo "$KEYSTORE_JKS_BASE64" | base64 --decode > keystore.jks
    env:
      KEYSTORE_JKS_BASE64: ${{ secrets.KEYSTORE_JKS_BASE64 }}

  - name: 🛠️ Inject Runtime .env File for Local Parity
    run: |
      echo "FIREBASE_TOKEN=$FIREBASE_TOKEN" >> .env
      echo "FIREBASE_APP_ID=$FIREBASE_APP_ID" >> .env
      echo "KEYSTORE_FILE=keystore.jks" >> .env
      echo "KEYSTORE_PROPS=keystore.properties" >> .env

  - name: ⚙️ Build Signed Release APK [${{ matrix.region }} region]
    run: |
      ./gradlew assembleRelease -Plocale=${{ matrix.region }}

  - name: 🎉 Upload Regioned APK Artifact
    uses: actions/upload-artifact@v3
    with:
      name: Signed-APK-${{ matrix.region }}
      path: app/build/outputs/apk/release/*.apk

  - name: 🚀 Deploy APK to Firebase App Distribution
    run: |
      firebase appdistribution:distribute app/build/outputs/apk/release/app-release.apk \
        --app $FIREBASE_APP_ID \
        --groups "internal-testers-${{ matrix.region }}" \
        --token "$FIREBASE_TOKEN"

  - name: 🌐 Upload APK to Firebase Hosting CDN [${{ matrix.region }}]
    run: |
      mkdir -p public/releases/${{ matrix.region }}
      cp app/build/outputs/apk/release/app-release.apk public/releases/${{ matrix.region }}/
      echo "{"hosting":{"public":"public","ignore":["firebase.json"]}}" > firebase.json
      firebase deploy --only hosting --project $FIREBASE_PROJECT_ID --token "$FIREBASE_TOKEN"

  - name: 📈 Generate Blockchain Integrity Log
    run: |
      sha256sum app/build/outputs/apk/release/app-release.apk > app-release.${{ matrix.region }}.sha256.txt

  - name: 🌎 Mirror APK Hash to IPFS Validator Node
    run: |
      curl -X POST $IPFS_API_URL/api/v0/add \
        -H "Authorization: Bearer $IPFS_API_KEY" \
        -F file=@app-release.${{ matrix.region }}.sha256.txt

  - name: 📢 Notify via Slack
    if: always()
    uses: slackapi/slack-github-action@v1.24.0
    with:
      payload: |
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
# .github/workflows/android-tokenchain-release.yml

name: 🔥 TokenChain Sovereign CI/CD (FinalForm Governance Lock + Validator + CDN)

on:
  push:
    branches:
      - main
      - release/**
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: write
  actions: write
  id-token: write

jobs:
  build-and-release:
    if: github.actor == 'authorized-governor'  # Require governor-level authority
    runs-on: ubuntu-latest

    strategy:
      matrix:
        region: [us, eu, ng]

    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
      FIREBASE_PROJECT_ID: cdeff0001
      IPFS_API_URL: ${{ secrets.IPFS_API_URL }}
Edit 

default._domainkey.vaundra.io.
300
TXT
v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtEAe5zbfDWl5eQkny/dqe0d3wa0DLaBO4DHXcYTKvzA2orzo6uB3qb8oVZ/jkwAVbuvnk7++KqXrjDz1oMOmcko6CJA+c0FqcUfk9d+yMNW5Dgqqy/pdyXhV/UTPVhoR362AtxO+TURDt8ItqjZOdVxcY8eTVc5i1JseW8JdYciqDEIhvzbQcdDPhdy4z1oqu
RyLxe6yyMgcq+HZZzjM7YMxAIsdCqXUjDfPDpz1F3N8j8T5k1uwNn5CwyVbgIUNtjlQlsbHi6wBPpqkH0xINLeOC2mYFQzTZysn5GPdOCXiBbxclhZSR9WklOw/smCbKgBOZtc9cnEaoMa7nZ+ehQIDAQAB;
hosting-site=cdeff0001
Ask ChatGPT to edit

        {
          "text": "🌟 *TokenChain [${{ matrix.region }}]* Build #${{ github.run_number }}\nStatus: ${{ job.status }}\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
        }
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  - name: 📲 Notify via Telegram
    if: always()
    run: |
      curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
      -d chat_id=$TELEGRAM_CHAT_ID \
      -d text="🚀 TokenChain *${{ matrix.region }}* Build #${{ github.run_number }}: *${{ job.status }}*%0Ahttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
      -d parse_mode=Markdown

            - name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v3.4.2
  with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # optional
    # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
    dotnet-quality: # optional
    # Optional global.json location, if your global.json isn't located in the root of the repo.
    global-json-file: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Optional input to enable caching of the NuGet global-packages folder
    cache: # optional
    # Used to specify the path to a dependency file: packages.lock.json. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
                      - name: Setup Node.js environment
  uses: actions/setup-node@v3.9.1
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
          
